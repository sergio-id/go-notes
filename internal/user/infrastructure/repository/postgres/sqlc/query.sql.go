// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO "user"."user" (id, email, password, first_name, last_name, updated_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, email, password, first_name, last_name, updated_at, created_at
`

type CreateUserParams struct {
	ID        uuid.UUID `json:"id"`
	Email     string    `json:"email"`
	Password  string    `json:"password"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (UserUser, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i UserUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"."user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, email, password, first_name, last_name, updated_at, created_at
FROM "user"."user"
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (UserUser, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i UserUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, first_name, last_name, updated_at, created_at
FROM "user"."user"
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (UserUser, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i UserUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"."user"
SET first_name = $2,
    last_name  = $3
WHERE id = $1 RETURNING id, email, password, first_name, last_name, updated_at, created_at
`

type UpdateUserParams struct {
	ID        uuid.UUID `json:"id"`
	FirstName string    `json:"first_name"`
	LastName  string    `json:"last_name"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UserUser, error) {
	row := q.db.QueryRowContext(ctx, updateUser, arg.ID, arg.FirstName, arg.LastName)
	var i UserUser
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.FirstName,
		&i.LastName,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
