// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/sergio-id/go-notes/cmd/auth/config"
	grpc2 "github.com/sergio-id/go-notes/internal/auth/delivery/grpc"
	"github.com/sergio-id/go-notes/internal/auth/infrastructure/network"
	redis2 "github.com/sergio-id/go-notes/internal/auth/infrastructure/repository/redis"
	"github.com/sergio-id/go-notes/internal/auth/usecase"
	"github.com/sergio-id/go-notes/pkg/logger"
	"github.com/sergio-id/go-notes/pkg/redis"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitApp(cfg *config.Config, cfgRedis redis.Config, grpcServer *grpc.Server, log logger.Logger) (*App, func(), error) {
	redisEngine, cleanup, err := redisEngineFunc(cfgRedis, log)
	if err != nil {
		return nil, nil, err
	}
	sessionRepository := redis2.NewSessionRepo(redisEngine)
	sessionUseCase := usecase.NewSessionUseCase(sessionRepository)
	userDomainService, err := network.NewGRPCUserClient(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	authServiceServer := grpc2.NewGRPCAuthServer(grpcServer, cfg, sessionUseCase, userDomainService, log)
	app := New(cfg, redisEngine, sessionUseCase, userDomainService, authServiceServer, log)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func redisEngineFunc(cfgRedis redis.Config, log logger.Logger) (redis.RedisEngine, func(), error) {
	r, err := redis.NewRedisClient(cfgRedis)
	if err != nil {
		return nil, nil, err
	}

	log.Infof("Redis connected on %s", cfgRedis.Addr)

	return r, func() { r.Close() }, nil
}
