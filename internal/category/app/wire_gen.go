// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package app

import (
	"github.com/sergio-id/go-notes/cmd/category/config"
	grpc2 "github.com/sergio-id/go-notes/internal/category/delivery/grpc"
	"github.com/sergio-id/go-notes/internal/category/infrastructure/network"
	postgres2 "github.com/sergio-id/go-notes/internal/category/infrastructure/repository/postgres"
	"github.com/sergio-id/go-notes/internal/category/usecase"
	"github.com/sergio-id/go-notes/pkg/logger"
	"github.com/sergio-id/go-notes/pkg/postgres"
	"google.golang.org/grpc"
)

// Injectors from wire.go:

func InitApp(cfg *config.Config, dbConnStr postgres.DBConnString, grpcServer *grpc.Server, log logger.Logger) (*App, func(), error) {
	dbEngine, cleanup, err := dbEngineFunc(dbConnStr, log)
	if err != nil {
		return nil, nil, err
	}
	categoryRepository := postgres2.NewCategoryRepo(dbEngine)
	categoryUseCase := usecase.NewCategoryUseCase(categoryRepository)
	authDomainService, err := network.NewGRPCAuthClient(cfg)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	categoryServiceServer := grpc2.NewGRPCCategoryServer(grpcServer, cfg, categoryUseCase, authDomainService, log)
	app := New(cfg, dbEngine, categoryUseCase, categoryServiceServer, authDomainService, log)
	return app, func() {
		cleanup()
	}, nil
}

// wire.go:

func dbEngineFunc(url postgres.DBConnString, log logger.Logger) (postgres.DBEngine, func(), error) {
	db, err := postgres.NewPostgresDB(url)
	if err != nil {
		return nil, nil, err
	}

	log.Infof("Connected to postgres: %s", url)

	return db, func() { db.Close() }, nil
}
