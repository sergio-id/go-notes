// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: query.sql

package postgres

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createCategory = `-- name: CreateCategory :one
INSERT INTO category.category (id, user_id, title, pinned, priority, updated_at, created_at)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, user_id, title, pinned, priority, updated_at, created_at
`

type CreateCategoryParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Title     string    `json:"title"`
	Pinned    bool      `json:"pinned"`
	Priority  int32     `json:"priority"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (CategoryCategory, error) {
	row := q.db.QueryRowContext(ctx, createCategory,
		arg.ID,
		arg.UserID,
		arg.Title,
		arg.Pinned,
		arg.Priority,
		arg.UpdatedAt,
		arg.CreatedAt,
	)
	var i CategoryCategory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Pinned,
		&i.Priority,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE
FROM category.category
WHERE id = $1 AND user_id = $2
`

type DeleteCategoryParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) DeleteCategory(ctx context.Context, arg DeleteCategoryParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, arg.ID, arg.UserID)
	return err
}

const getCategory = `-- name: GetCategory :one
SELECT id, user_id, title, pinned, priority, updated_at, created_at
FROM category.category
WHERE id = $1 AND user_id = $2
`

type GetCategoryParams struct {
	ID     uuid.UUID `json:"id"`
	UserID uuid.UUID `json:"user_id"`
}

func (q *Queries) GetCategory(ctx context.Context, arg GetCategoryParams) (CategoryCategory, error) {
	row := q.db.QueryRowContext(ctx, getCategory, arg.ID, arg.UserID)
	var i CategoryCategory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Pinned,
		&i.Priority,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, user_id, title, pinned, priority, updated_at, created_at
FROM category.category
WHERE user_id = $1
ORDER BY pinned DESC, priority DESC, title ASC
LIMIT $2 OFFSET $3
`

type ListCategoriesParams struct {
	UserID uuid.UUID `json:"user_id"`
	Limit  int32     `json:"limit"`
	Offset int32     `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]CategoryCategory, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []CategoryCategory
	for rows.Next() {
		var i CategoryCategory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Pinned,
			&i.Priority,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE category.category
SET title      = $2,
    pinned     = $3,
    priority   = $4,
    updated_at = $5
WHERE id = $1 AND user_id = $6 RETURNING id, user_id, title, pinned, priority, updated_at, created_at
`

type UpdateCategoryParams struct {
	ID        uuid.UUID `json:"id"`
	Title     string    `json:"title"`
	Pinned    bool      `json:"pinned"`
	Priority  int32     `json:"priority"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (CategoryCategory, error) {
	row := q.db.QueryRowContext(ctx, updateCategory,
		arg.ID,
		arg.Title,
		arg.Pinned,
		arg.Priority,
		arg.UpdatedAt,
		arg.UserID,
	)
	var i CategoryCategory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Pinned,
		&i.Priority,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}
